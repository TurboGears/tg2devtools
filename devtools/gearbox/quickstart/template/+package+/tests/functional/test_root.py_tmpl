"""
Functional test suite for the root controller.

This is an example of how functional tests can be written for controllers.

As opposed to a unit-test, which test a small unit of functionality,
functional tests exercise the whole application and its WSGI stack.

Please read https://webtest.readthedocs.io/ for more information.

"""
import pytest


def test_index(app):
    """The front page is working properly"""
    response = app.get('/')
    msg = 'TurboGears 2 is rapid web application development toolkit '\
        'designed to make your life easier.'
    # You can look for specific strings:
    assert msg in response

    # You can also access a BeautifulSoup'ed response in your tests
    # (First run $ pip install BeautifulSoup
    # and then uncomment the next two lines)

    # links = response.html.findAll('a')
    # print(links)
    # ok_(links, "Mummy, there are no links here!")
    # ## otherwise give pyquery a try


{{if not minimal_quickstart}}
def test_environ(app):
    """Displaying the wsgi environ works"""
    response = app.get('/environ.html')
    assert 'The keys in the environment are:' in response.body.decode('utf-8')


def test_data(app):
    """The data display demo works with HTML"""
    response = app.get('/data.html?a=1&b=2')
    response.mustcontain("<td>a", "<td>1",
                         "<td>b", "<td>2")


def test_data_json(app):
    """The data display demo works with JSON"""
    resp = app.get('/data.json?a=1&b=2')
    assert dict(page='data', params={'a': '1', 'b': '2'}) == resp.json


{{if auth == "sqlalchemy" or auth == "ming"}}
@pytest.mark.parametrize('url,user,status', (
    ('/secc', None, 401),
    ('/secc', 'manager', 200),
    ('/secc', 'editor', 403),
    ('/secc/some_where', 'manager', 200),
    ('/secc/some_where', 'editor', 403),
))
def test_secc_access(app, url, user, status):
    app.get(url, extra_environ={'REMOTE_USER': user}), status=status)

{{endif}}
{{endif}}

{{if auth == "sqlalchemy" or auth == "ming"}}
@pytest.mark.parametrize('url,user,status', (
    {{if not minimal_quickstart}}('/about', None, 200),{{endif}}
    ('/manage_permission_only', 'manager', 200),
    ('/manage_permission_only', 'editor', 403),
    ('/editor_user_only', 'manager', 403),
    ('/editor_user_only', 'editor', 200),
))
def test_page_access(app, url, user, status):
    app.get(url, extra_environ={'REMOTE_USER': user}, status=status)
{{endif}}

def test_error_document_500(app):
    resp = app.get('/error/document', expect_errors=True)
    assert "We're sorry but we weren't able to process this request" in resp
